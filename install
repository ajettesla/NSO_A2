#!/bin/bash

process_servers_json() {
    # Define temporary files
    dev_file="dev_inventory.tmp"
    dev_test_file="dev_inventory2.tmp"
    proxy_file="proxy_inventory.tmp"
    proxy_test_file="proxy_inventory2.tmp"
    bastion_file="bastion_inventory.tmp"
    bastion_test_file="bastion_inventory2.tmp"
    inventory_file="openstack_inventory"
    inventory_file2="openstack_inventory2"
    inventory_fileL="openstack_inventoryL"
    sshc_bastion="sshc_bastion.tmp"
    proxy_fileL="proxy_fileL.tmp"
    bastion_fileL="bastion_fileL.tmp"

    # Clear the content of the output files before writing
    > "$dev_file"
    > "$dev_test_file"
    > "$proxy_file"
    > "$proxy_fileL"
    > "$proxy_test_file"
    > "$bastion_file"
    > "$bastion_test_file"
    > "$sshc_bastion"
    > "$inventory_file"
    > "$inventory_file2"
    > "$inventory_fileL"
    > "$bastion_fileL"

    # Fetch the JSON output from OpenStack
    #!/bin/bash

servers_json=$(openstack server list -f json --long)

# Check if all servers are active
start_time=$(date +%s)
all_active=true

# Using a while loop with process substitution to avoid subshell
while IFS= read -r server; do
    name=$(echo "$server" | jq -r '.Name')
    power_state=$(echo "$server" | jq -r '."Power State"')

    if [[ "$power_state" != "1" ]]; then 
        all_active=false
        echo  " $(date +%T) $name is shutdown"
        break
    fi
done < <(echo "$servers_json" | jq -c '.[]')


if [ "$all_active" = false ]; then
    echo  " $(date +%T) Some servers are not in ACTIVE state. Waiting for up to 60 seconds for them to become active..."

    while : ; do
        current_time=$(date +%s)
        elapsed_time=$((current_time - start_time))

        if [ "$elapsed_time" -ge 60 ]; then
            echo  " $(date +%T) Waited 60 seconds. Some servers are still not active:"
            echo "$servers_json" | jq -c '.[]' | while IFS= read -r server; do
                name=$(echo "$server" | jq -r '.Name')
                power_state=$(echo "$server" | jq -r '."Power State"')

                if [[ "$power_state" != "1" ]]; then 
                    echo  " $(date +%T) $name is in SHUTDOWN STATE"
                fi
            done
            break
        fi

        # Re-check the status of all servers
        all_active=true
        servers_json=$(openstack server list -f json --long)
        while IFS= read -r server; do
            name=$(echo "$server" | jq -r '.Name')
            power_state=$(echo "$server" | jq -r '."Power State"')

            if [[ "$power_state" != "1" ]]; then 
                all_active=false
                break
            fi
        done < <(echo "$servers_json" | jq -c '.[]')

        if [ "$all_active" = true ]; then
            echo  " $(date +%T) All servers are now in ACTIVE state."
            break
        fi

        sleep 5  # wait before re-checking
    done
else
    echo  " $(date +%T) All servers are already in ACTIVE state. Proceeding with the script..."
fi


    # Now continue with the rest of the script (processing servers for inventory creation)
    echo "$servers_json" | jq -c '.[]' | while IFS= read -r server; do
        name=$(echo "$server" | jq -r '.Name')
        power_state=$(echo "$server" | jq -r '."Power State"')
        networks=$(echo "$server" | jq -r '.Networks | to_entries[].value[]')

        # Extract public IP
        private_IP=$(echo "$networks" | head -n 1 | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
       

        if [ -n "$private_IP" ]; then
            echo -e "Host $name \n\t Hostname $private_IP \n\t User ubuntu \n\t IdentityFile ~/.ssh/$ssh_basename" >> $sshc_bastion
            if [[ "$name" == *"dev"* && "$name" == *"$tag"* ]]; then
                echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$dev_file"
                echo "$name" >> $bastion_test_file
            elif [[ "$name" == *"proxy"* && "$name" == *"$tag"* ]]; then
                public_IP=$(echo "$server" | jq -r '.Networks | to_entries[].value[1]' | head -n 1)
                if [[ -z $public_IP ]]; then
                    echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$proxy_file"
                else
                    if [[ -n $public_IP ]]; then
                    echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=${sshkey}" >> "$proxy_fileL"
                    fi 
                    echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$proxy_file"
                fi
                
                echo "$name" >> $bastion_test_file
            elif [[ "$name" == *"bastion"* && "$name" == *"$tag"* ]]; then
                public_IP=$(echo "$server" | jq -r '.Networks | to_entries[].value[1]' | head -n 1)
                echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=${sshkey}" >> "$bastion_fileL"
                echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$bastion_file"
                echo "$name" >> $bastion_test_file
            fi
        else 
            echo " $(date +%T) Something went wrong with getting the IP address for $name."
        fi
    done

    # Create the first inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_file"
      echo "[proxy]"
      cat "$proxy_file"
      echo "[bastion]"
      cat "$bastion_file"
    } > "$inventory_file"

    # Create the second inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_test_file"
      echo "[proxy]"
      cat "$proxy_test_file"
      echo "[bastion]"
      cat "$bastion_test_file"
    } > "$inventory_file2"

    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo ""
      echo "[proxy]"
      cat "$proxy_fileL"
      echo "[bastion]"
      cat "$bastion_fileL"      

    } > "$inventory_fileL"

    # Clean up temporary files
    rm -f "$dev_file" "$proxy_file" "$proxy_fileL" "$bastion_file" "$bastion_fileL" "$dev_test_file" "$proxy_test_file" "$bastion_test_file"

    # Append groupings
    {
        echo -e "\n"
        echo "[all:children]"
        echo -e "\n"
        echo "proxy"
        echo "dev"
        echo "bastion"
    } >> "$inventory_file"

    {
        echo -e "\n"
        echo "[all:children]"
        echo -e "\n"
        echo "proxy"
        echo "dev"
        echo "bastion"
    } >> "$inventory_file2"

echo " $(date +%T) Inventory file generated: $inventory_file"

cp "$inventory_file" roles/ansible/files/prod
cp "$inventory_file2" roles/ansible/files/prod2
cp "$inventory_fileL" environments/prod
cp $sshc_bastion roles/ansible/files/config

rm -rf $inventory_file

rm -rf $inventory_file2

rm -rf $inventory_fileL

rm -rf $sshc_bastion
}
process_servers_csv() {
    # Define temporary files
    dev_file="dev_inventory.tmp"
    dev_test_file="dev_inventory2.tmp"
    proxy_file="proxy_inventory.tmp"
    proxy_test_file="proxy_inventory2.tmp"
    bastion_file="bastion_inventory.tmp"
    bastion_test_file="bastion_inventory2.tmp"
    inventory_file="openstack_inventory"
    inventory_file2="openstack_inventory2"
    inventory_fileL="openstack_inventoryL"
    sshc_bastion="sshc_bastion.tmp"
    proxy_fileL="proxy_fileL.tmp"
    bastion_fileL="bastion_fileL.tmp"

    # Clear the content of the output files before writing
    > "$dev_file"
    > "$dev_test_file"
    > "$proxy_file"
    > "$proxy_fileL"
    > "$proxy_test_file"
    > "$bastion_file"
    > "$bastion_test_file"
    > "$sshc_bastion"
    > "$inventory_file"
    > "$inventory_file2"
    > "$inventory_fileL"
    > "$bastion_fileL"

    servers_csv=$(openstack server list -f csv --long | tail -n +2)

    # Check if all servers are active
    start_time=$(date +%s)
    all_active=true

    # Process each server in a loop without creating a subshell
    while IFS=, read -r server; do
        name=$(echo $server | cut -d "," -f 2 | tr -d '"')
        power_state=$(echo $server | cut -d "," -f 5 | tr -d '"')

        if [[ "$power_state" -ne 1 ]]; then 
            all_active=false
            break
        fi
    done < <(echo "$servers_csv")

    if [ "$all_active" = false ]; then
        echo  " $(date +%T) Some servers are not in ACTIVE state. Waiting for up to 60 seconds for them to become active..."
        
        while : ; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))

            if [ "$elapsed_time" -ge 60 ]; then
                echo  " $(date +%T) Waited 60 seconds. Some servers are still not active:"
                openstack server list -f csv --long | tail -n +2 | while IFS=, read -r server; do
                    name=$(echo $server | cut -d "," -f 2 | tr -d '"')
                    power_state=$(echo $server | cut -d "," -f 5 | tr -d '"')

                    if [[ "$power_state" -ne 1 ]]; then 
                        echo  " $(date +%T) $name is in SHUTDOWN STATE"
                    fi
                done
                break
            fi

            # Re-check the status of all servers
            all_active=true
            while IFS=, read -r server; do
                name=$(echo $server | cut -d "," -f 2 | tr -d '"')
                power_state=$(echo $server | cut -d "," -f 5 | tr -d '"')

                if [[ "$power_state" -ne 1 ]]; then 
                    all_active=false
                    break
                fi
            done < <(openstack server list -f csv --long | tail -n +2)

            if [ "$all_active" = true ]; then
                echo  " $(date +%T) All servers are now in ACTIVE state."
                break
            fi

            sleep 5  # wait before re-checking
        done
    else
        echo  " $(date +%T) All servers are already in ACTIVE state. Proceeding with the script..."
    fi

    # Now continue with the rest of the script (processing servers for inventory creation)
    echo "$servers_csv" | while IFS=, read -r server; do
        name=$(echo $server | cut -d "," -f 2 | tr -d '"')
        power_state=$(echo $server | cut -d "," -f 5 | tr -d '"')
        networks=$(echo $server | cut -d "," -f 6)

        # Extract public IP
        public_IP=$(echo $server | cut -d "," -f 7 | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
        private_IP=$(echo $server | cut -d "," -f 6 | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')

        if [ -n "$private_IP" ]; then
            echo -e "Host $name \n\t Hostname $private_IP \n\t User ubuntu \n\t IdentityFile ~/.ssh/$ssh_basename" >> $sshc_bastion
            if [[ "$name" == *"dev"* && "$name" == *"$tag"* ]]; then
                echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${sshkey_basename}" >> "$dev_file"
                echo "$name" >> $bastion_test_file
            elif [[ "$name" == *"proxy"* && "$name" == *"$tag"* ]]; then
                if [[ -z $public_IP ]]; then
                    echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${sshkey_basename}" >> "$proxy_file"
                else
                    if [[ -n $public_IP ]]; then
                    echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=${sshkey}" >> "$proxy_fileL"
                    fi 
                    echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$proxy_file"
                fi
                echo "$name" >> $bastion_test_file
            elif [[ "$name" == *"bastion"* && "$name" == *"$tag"* ]]; then
                echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=${sshkey}" >> "$bastion_fileL"
                echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$bastion_file"
                echo "$name" >> $bastion_test_file
            fi
        else 
            echo "$(date +%T) Something went wrong with getting the IP address for $name."
        fi
    done

    # Create the first inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_file"
      echo "[proxy]"
      cat "$proxy_file"
      echo "[bastion]"
      cat "$bastion_file"
    } > "$inventory_file"

    # Create the second inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_test_file"
      echo "[proxy]"
      cat "$proxy_test_file"
      echo "[bastion]"
      cat "$bastion_test_file"
    } > "$inventory_file2"

    # Create the third inventory file (inventory_fileL)
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo ""
      echo "[proxy]"
      cat "$proxy_fileL"
      echo "[bastion]"
      cat "$bastion_fileL"
    } > "$inventory_fileL"

    # Clean up temporary files
    rm -f "$dev_file" "$proxy_file" "$proxy_fileL" "$bastion_file" "$bastion_fileL" "$dev_test_file" "$proxy_test_file" "$bastion_test_file"

    # Append groupings
    {
        echo -e "\n"
        echo "[all:children]"
        echo -e "\n"
        echo "proxy"
        echo "dev"
        echo "bastion"
    } >> "$inventory_file"

    {
        echo -e "\n"
        echo "[all:children]"
        echo -e "\n"
        echo "proxy"
        echo "dev"
        echo "bastion"
    } >> "$inventory_file2"

    echo " $(date +%T) Inventory file generated: $inventory_file"

    cp "$inventory_file" roles/ansible/files/prod
    cp "$inventory_file2" roles/ansible/files/prod2
    cp "$inventory_fileL" environments/prod

    cp $sshc_bastion roles/ansible/files/config

    sudo chmod 0600 roles/ansible/files/config

    rm -rf $inventory_file
    rm -rf $inventory_file2
    rm -rf $inventory_fileL
    rm -rf $sshc_bastion
}



openrc_file=$1
tag=$2
sshkey=$3

if [ -z "$4" ]; then
    nofn=3
else 
    nofn=$4
fi

if [ -z "$3" ] || [ -z "$2" ] || [ -z "$1" ]; then
    echo "$(date +%T) please give ./install <openrc_file> <tag> <key_name>"
    exit 1
fi


# check if the OpenRC file exists
if [ ! -f "$openrc_file" ]; then
    echo " $(date +%T) Error: OpenRC file '$openrc_file' not found."
    exit 1
fi

# Source the OpenRC file
source "$openrc_file"

ssh_basename=$(basename ${sshkey})

mkdir -p .ssh/

sshc_my="~/.ssh/config/"

sshc_bastion="./ssh/config"

# Check if the OpenStack CLI command is available and working
openstack flavor list > /dev/null 2>&1;

if [ $? -eq 0 ]; then
    echo " $(date +%T) Connected to OpenStack cloud."
else
    echo " $(date +%T) Failed to connect to OpenStack cloud."
    exit 1
fi


# Function to calculate the fingerprint of a key
get_fingerprint() {
     ssh-keygen -lf $1 -E md5 | awk '{print $2}' | sed 's/^MD5://'
}

# Check if the keypair exists in OpenStack
echo " $(date +%T) Checking if keypair exists in OpenStack..."
cloud_key_fingerprint=$(openstack keypair show ${ssh_basename}${tag} -f value -c fingerprint 2>/dev/null)

if [[ -z $cloud_key_fingerprint ]]; then
    echo " $(date +%T) Keypair does not exist in the cloud. Proceeding to upload local key."
else
    echo " $(date +%T) Cloud keypair fingerprint: $cloud_key_fingerprint"
fi

# Check if the keypair exists locally
echo " $(date +%T) Checking if keypair exists locally at ${sshkey}..."
if [[ -f ${sshkey}.pub ]]; then
    local_key_fingerprint=$(get_fingerprint ${sshkey}.pub)
    echo " $(date +%T) Local keypair fingerprint: $local_key_fingerprint"

    if [[ "$cloud_key_fingerprint" == "$local_key_fingerprint" ]]; then
        echo " $(date +%T) The local and cloud keypairs are identical. No action needed."
    else
        if [[ ! -z $cloud_key_fingerprint ]]; then
            echo " $(date +%T) Keypair in the cloud is different from the local keypair. Deleting the cloud keypair."
            openstack keypair delete ${ssh_basename}${tag}
        fi

        echo " $(date +%T) Uploading local public key to OpenStack..."
        openstack keypair create --public-key ${sshkey}.pub ${ssh_basename}${tag}
        if [[ $? -eq 0 ]]; then
            echo " $(date +%T) Public key uploaded successfully."
        else   
            echo "Failed to upload the key."
            exit 1
        fi
    fi
else
    echo " $(date +%T) Keypair does not exist locally. Generating a new SSH key pair..."
    ssh-keygen -t rsa -b 4096 -f ${sshkey} -N "" > /dev/null
    echo " $(date +%T) Keypair generated. Uploading public key to OpenStack..."
    openstack keypair create --public-key ${sshkey}.pub ${sshkey}
    if [[ $? -eq 0 ]]; then
        echo " $(date +%T) Public key uploaded successfully."
    else   
        echo " $(date +%T) Failed to upload the key."
        exit 1
    fi
fi

mkdir -p roles/ansible/files/ > /dev/null

cp  ${sshkey} roles/ansible/files/${ssh_basename}

create_public_network() {
    if openstack network list | grep -q vrundhavan_public${tag}; then
        echo " $(date +%T) Public network already exists."
    else
        openstack network create vrundhavan_public${tag} --tag ${tag} >/dev/null
        if [ $? -eq 0 ]; then
            echo " $(date +%T) Public network is created."
        else
            echo " $(date +%T) Failed to create Public network."
            exit 1
        fi
    fi
}

create_private_network() {
    if openstack network list | grep -q vrundhavan_private${tag}; then
        echo " $(date +%T) Private network already exists."
    else
        openstack network create vrundhavan_private${tag} --tag ${tag} >/dev/null
        if [ $? -eq 0 ]; then
            echo " $(date +%T) Private network is created."
        else
            echo " $(date +%T) Failed to create Private network."
            exit 1
        fi
    fi
}

create_public_network
create_private_network

# Check and create subnets
if openstack subnet list | grep -q public_subnet${tag}; then
    echo " $(date +%T) Public subnet already exists."
else
    openstack subnet create --dhcp --network vrundhavan_public${tag} --subnet-range 10.1.1.0/24 public_subnet${tag} --tag ${tag} 1>/dev/null
    if [ $? -eq 0 ]; then
        echo " $(date +%T) Public subnet is created."
    else
        echo " $(date +%T) Fail to create public subnet."
        exit 1
    fi
fi

if openstack subnet list | grep -q private_subnet${tag}; then
    echo " $(date +%T) Private subnet already exists."
else
    openstack subnet create --dhcp --network vrundhavan_private${tag} --subnet-range 10.1.2.0/24 private_subnet${tag} --tag ${tag} 1>/dev/null
    if [ $? -eq 0 ]; then
        echo " $(date +%T) Private subnet is created."
    else
        echo " $(date +%T) Fail to create Private subnet."
        exit 1
    fi
fi

# Check and create security groups
if openstack security group list | grep -q external_security_group${tag}; then
    echo " $(date +%T) External security group already exists."
else
    openstack security group create external_security_group${tag} --tag ${tag} 1>/dev/null
    if [ $? -eq 0 ]; then
        echo " $(date +%T) External security group is created."
    else
        echo " $(date +%T) Fail to create External security group."
        exit 1
    fi
fi

if openstack security group list | grep -q internal_security_group${tag}; then
    echo " $(date +%T) Internal security group already exists."
else
    openstack security group create internal_security_group${tag} --tag ${tag} 1>/dev/null
    if [ $? -eq 0 ]; then
        echo " $(date +%T) Internal security group is created."
    else
        echo " $(date +%T) Fail to create Internal security group."
        exit 1
    fi
fi

# Function to check if a security group rule exists and create it if it does not
add_security_group_rule_if_not_exists() {
    local security_group=$1
    local protocol=$2
    local port=$3
    local remote_ip=$4

    if [ -z "$port" ]; then
        port_filter=".\"Port Range\" == null"
    else
        port_filter=".\"Port Range\" == \"$port\""
    fi

    if openstack security group rule list $security_group -f json | jq -r ".[] | select(.\"Remote IP Prefix\" == \"$remote_ip\" and $port_filter and .Protocol == \"$protocol\")" | grep -q .; then
        echo " $(date +%T) Security group rule for $protocol on port $port with remote IP $remote_ip already exists in $security_group."
    else
        if [ -z "$port" ]; then
            openstack security group rule create --remote-ip $remote_ip --protocol $protocol --ingress $security_group >/dev/null 2>&1
        else
            openstack security group rule create --remote-ip $remote_ip --dst-port $port --protocol $protocol --ingress $security_group >/dev/null 2>&1
        fi

        if [ $? -eq 0 ]; then
            echo " $(date +%T) Security group rule for $protocol on port $port with remote IP $remote_ip added to $security_group."
        else
            echo " $(date +%T) Security group rule for $protocol on port $port with remote IP $remote_ip already exists in $security_group."
        fi
    fi
}

# Apply security group rules
add_security_group_rule_if_not_exists external_security_group${tag} tcp 22 0.0.0.0/0
add_security_group_rule_if_not_exists external_security_group${tag} tcp 5000 0.0.0.0/0
add_security_group_rule_if_not_exists external_security_group${tag} tcp 9090 0.0.0.0/0
add_security_group_rule_if_not_exists external_security_group${tag} tcp 3000 0.0.0.0/0
add_security_group_rule_if_not_exists external_security_group${tag} any "" 10.1.0.0/16
add_security_group_rule_if_not_exists external_security_group${tag} udp 6000 0.0.0.0/0
add_security_group_rule_if_not_exists external_security_group${tag} icmp "" 0.0.0.0/0
add_security_group_rule_if_not_exists internal_security_group${tag} any "" 10.1.0.0/16


echo " $(date +%T) Security group rules have been added."

# Check if the router exists, if not, create it
if openstack router list | grep -q router_1${tag}; then
    echo " $(date +%T) Router already exists."
else
    openstack router create router_1${tag} --tag ${tag} 1>/dev/null
    if [ $? -eq 0 ]; then
        echo " $(date +%T) Router is created."
    else
        echo " $(date +%T) Fail to create Router."
        exit 1
    fi
fi

# Set external gateway for the router
openstack router set --external-gateway ext-net router_1${tag} 1>/dev/null
if [ $? -eq 0 ]; then
    echo " $(date +%T) Set external-gateway to router."
else
    echo " $(date +%T) Fail to set external-gateway to router."
    exit 1
fi

# Check if the private subnet is already attached to the router
if openstack router show router_1${tag} -f json | jq -r '.interfaces_info[].subnet_id' | grep -q $(openstack subnet show private_subnet${tag} -f json | jq -r '.id'); then
    echo " $(date +%T) Private subnet is already attached to the router."
else
    openstack router add subnet router_1${tag} private_subnet${tag} 1>/dev/null
    if [ $? -eq 0 ]; then
        echo " $(date +%T) Private subnet added to router."
    else
        echo " $(date +%T) Failed to add private subnet to router."
        exit 1
    fi
fi

# Check if the public subnet is already attached to the router
if openstack router show router_1${tag} -f json | jq -r '.interfaces_info[].subnet_id' | grep -q $(openstack subnet show public_subnet${tag} -f json | jq -r '.id'); then
    echo " $(date +%T) Public subnet is already attached to the router."
else
    openstack router add subnet router_1${tag} public_subnet${tag} 1>/dev/null
    if [ $? -eq 0 ]; then
        echo " $(date +%T) Public subnet added to router."
    else
        echo " $(date +%T) Failed to add public subnet to router."
        exit 1
    fi
fi

echo " $(date +%T) Subnets are added to the router."

# Create floating IPs for bastion and haproxy
floating_ip_bastion=$(openstack floating ip create --tag ${tag} ext-net -f json | jq -r .name)
if [ $? -eq 0 ]; then
    echo " $(date +%T) Floating IP for bastion is created: $floating_ip_bastion"
else
    echo " $(date +%T) Fail to create bastion floating IP."
    exit 1
fi

floating_ip_haproxy=$(openstack floating ip create --tag ${tag} ext-net -f json | jq -r .name) 
if [ $? -eq 0 ]; then
    echo " $(date +%T) Floating IP for haproxy is created: $floating_ip_haproxy"
else
    echo " $(date +%T) Fail to create haproxy floating IP."
    exit 1
fi


cat <<EOF > ./.ssh/config
Host bastion
    Hostname $floating_ip_bastion
    User ubuntu
    IdentityFile ${sshkey}

Host proxy
    Hostname $floating_ip_haproxy
    User ubuntu
    IdentityFile ${sshkey}

EOF


export image_name='Ubuntu 22.04 Jammy Jellyfish x86_64'

export flavor_name='m1.small'

if [ -z "$image_name" ] || [ -z "$flavor_name" ] || [ -z "$sshkey" ] || [ -z "$tag" ]; then
    echo " $(date +%T ) Required environment variables are not set."
    exit 1
fi

openstack server create  --image "$image_name" --flavor "$flavor_name" --network vrundhavan_public${tag} --key-name ${ssh_basename}${tag} --security-group external_security_group${tag}  bastion${tag} 2>&1 > /dev/null

if [ $? -eq 0 ]; then
    echo " $(date +%T ) Bastion machine is create "
else
    echo " $(date +%T ) Fail to create bastion"
    exit 1
fi

openstack server create  --image "$image_name" --flavor "$flavor_name" --network vrundhavan_public${tag} --key-name ${ssh_basename}${tag} --security-group external_security_group${tag}  proxy_1${tag} 2>&1 > /dev/null

if [ $? -eq 0 ]; then
    echo " $(date +%T ) proxy machine is create "
else
    echo " $(date +%T ) Fail to create proxy"
    exit 1
fi


openstack server create  --image "$image_name" --flavor "$flavor_name" --network vrundhavan_public${tag} --key-name ${ssh_basename}${tag} --security-group external_security_group${tag}  proxy_2${tag} 2>&1 > /dev/null

if [ $? -eq 0 ]; then
    echo " $(date +%T ) proxy machine is create "
else
    echo " $(date +%T ) Fail to create proxy"
    exit 1
fi

openstack server add floating ip bastion${tag} $floating_ip_bastion 2>&1 > /dev/null

if [ $? -eq 0 ]; then
    echo " $(date +%T ) Bastion have public ip now "
else
    echo " $(date +%T ) Fail to assign public ip to bastion"
    exit 1
fi


openstack server add floating ip proxy_1${tag} $floating_ip_haproxy 2>&1 > /dev/null

if [ $? -eq 0 ]; then
    echo " $(date +%T ) proxy_1 as master have public ip now "
else
    echo " $(date +%T ) Fail to assign public ip to proxy_1"
    exit 1
fi

for x in $(seq 1 $nofn); do

  openstack server create  --image "$image_name" --flavor "$flavor_name" --network vrundhavan_private${tag} --key-name ${ssh_basename}${tag} --security-group internal_security_group${tag} dev_"$x"${tag}  1>/dev/null

  if [ $? -eq 0 ]; then
      echo " $(date +%T ) dev${x} is created "
  else   
      echo " $(date +%T ) Fail to create dev"
      exit 1
  fi
done


process_servers_json 2>error.log

if grep -q "jq" error.log; then
    echo " $(date +%T) Something wrong with JSON format. Let's solve this by CSV."
    process_servers_csv
fi
rm -rf error.log


cat <<EOF > group_vars/all.yml

floatingIp:
  bastion: $floating_ip_bastion
  haproxy: $floating_ip_haproxy

name:
    key: ${ssh_basename}
    tag: $tag

prometheus:
    version: 2.54.0-rc.1
    install_dir: "/opt/prometheus"
    data_dir: "/var/lib/prometheus"
    config_dir: "/etc/prometheus"
    prometheus_binary_url: "https://github.com/prometheus/prometheus/releases/download/v2.54.0-rc.1/prometheus-2.54.0-rc.1.linux-amd64.tar.gz"
    node_exporter_binary_url: "https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz"

grafana:
  admin_user: admin
  admin_password: admin
  dashboard_id: "11074"
  grafana_url: "http://localhost:3000"
  dashboard_overwrite: true
  folder: "Node Exporter Dashboards"

EOF


file_permissions=$(stat -c "%a" ${sshkey})

# Check if the permissions are equal to 0600
if [ "$file_permissions" -eq 600 ]; then
    echo " $(date +%T) The file has the correct permissions: 0600"
else
    echo " $(date +%T) The file ${sshkey} does not have the correct permissions. Current permissions: $file_permissions"
    sudo chmod 0600 ${sshkey} > /dev/null 2>&1
fi

rm -rf roles/ansible/files/*.zip > /dev/null 2>&1

cd ..

zip -r NSO_A2/roles/ansible/files/NSO_A2.zip  NSO_A2 > /dev/null 2>&1

cd NSO_A2

cp openrc_file  roles/keepalived/files > /dev/null 2>&1

# ssh-keygen -f "~/.ssh/known_hosts" -R "bastion" > /dev/null 2>&1

# ssh-keygen -f "~/.ssh/known_hosts" -R $floating_ip_bastion > /dev/null 2>&1

# ssh-keygen -f "~/.ssh/known_hosts" -R $floating_ip_haproxy > /dev/null 2>&1

# ssh-keygen -f "~/.ssh/known_hosts" -R "proxy" > /dev/null 2>&1


>ansible.cfg

grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' environments/prod > /dev/null

if [[ $? -eq 0 ]]; then
    echo " $(date +%T) Seems like the inventory file is fine."
    cat <<EOF > ansible.cfg
[defaults]
remote_user = ubuntu
inventory   = environments/prod
retry_files_save_path = /tmp
host_key_checking = False
log_path=~/ansible.log
EOF

else
    cat environments/prod
    echo "-----------------------------------------"
    cat ./.ssh/config
    echo "Do you want to change the inventory file? (y/n)"
    read -p "Enter your choice by viewing the SSH config file and environment: " cho
    if [[ $cho == "Y" || $cho == "y" ]]; then
        echo "Let's check if the SSH config file has IP addresses."
        if grep -q -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' roles/ansible/files/config; then
            echo "SSH config file has IPs, let's change the Ansible config file."
            cat <<EOF > ansible.cfg
[defaults]
remote_user = ubuntu
inventory   = environments/prod2
retry_files_save_path = /tmp
host_key_checking = False
log_path=~/ansible.log
EOF
        else
            cat <<EOF > ansible.cfg
[defaults]
remote_user = ubuntu
inventory   = environments/prod
retry_files_save_path = /tmp
host_key_checking = False
log_path=~/ansible.log
EOF
        fi
    else
        cat <<EOF > ansible.cfg
[defaults]
remote_user = ubuntu
inventory   = environments/prod
retry_files_save_path = /tmp
host_key_checking = False
log_path=~/ansible.log
EOF
        echo "Even though both do not have IPs, let's see if Ansible works right!"
    fi
fi

cp ansible.cfg roles/ansible/files

ansible-playbook app.yml

echo "Let's test " 

curl $floating_ip_haproxy:5000
curl $floating_ip_haproxy:5000
curl $floating_ip_haproxy:5000

snmpwalk -v2c -c public $floating_ip_haproxy:6000 iso.3.6.1.2.1.1.1.0
snmpwalk -v2c -c public $floating_ip_haproxy:6000 iso.3.6.1.2.1.1.1.0
snmpwalk -v2c -c public $floating_ip_haproxy:6000 iso.3.6.1.2.1.1.1.0


