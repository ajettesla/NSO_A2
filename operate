#!/bin/bash

# Ensure the script receives exactly three arguments
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 <openrc_file> <tag> <sshkey>"
    exit 1
fi

# Assign arguments to variables
openrc_file=$1
tag=$2
sshkey=$3

# Source the OpenRC file to set environment variables
source "$openrc_file"

# Path to the configuration file
config_file="server.conf"

sshc_my="~/.ssh/config/"

sshc_bastion="config"

# Ensure the configuration file exists
if [ ! -f "$config_file" ]; then
    echo " $(date +%T) Configuration file not found!"
    exit 1
fi

# Signal handlers
trap 'echo " $(date +%T) Ctrl-C pressed. Exiting after sleep."; exit 0' SIGINT
trap 'echo " $(date +%T) Ctrl-X pressed. Exiting immediately."; exit 0' SIGTSTP

while true; do
    # Read the number from the configuration file
    number=$(cat "$config_file")

    # Check if the variable is empty
    if [ -z "$number" ]; then
        echo " $(date +%T) No number found in configuration file!"
        exit 1
    fi

    export image_name='Ubuntu 22.04 Jammy Jellyfish x86_64'
    export flavor_name='m1.small'

    # Print the value to verify
    echo " $(date +%T) Desired number of servers: $number"

    # Get the current number of servers with "dev" in their name
    nofsr=$(openstack server list -f csv | grep "dev" | wc -l)
    echo " $(date +%T) Number of servers running is $nofsr"

    # Reset the trap for Ctrl-C to ensure proper behavior during critical operations
    trap 'echo " $(date +%T) Ctrl-C pressed. Waiting for settings to be applied before exiting."' SIGINT

    # Flag to check if any changes were made
    changes_made=false

    if [ "$number" -lt "$nofsr" ]; then
        # Calculate how many servers need to be deleted
        check=$(($nofsr - $number))

        # List servers with the specific tag
        servers_with_tag=$(openstack server list --tags "${tag}dev" -f csv | grep "dev" | cut -d "," -f1 | tr -d '"' | head -n "$check")

        for server_id in $servers_with_tag; do
            openstack server delete "$server_id"
            if [ $? -eq 0 ]; then
                echo " $(date +%T) Server $server_id ($(openstack server show $server_id -f json | jq -r '.name')) deleted"
                changes_made=true
            else   
                echo "$(date +%T) Failed to delete server $server_id ($(openstack server show $server_id -f json | jq -r '.name')) "
                openstack server show "$server_id"
                openstack server list --tags "${tag}dev" -f csv
                exit 1
            fi
        done

    elif [ "$number" -gt "$nofsr" ]; then
        # Calculate how many more servers need to be created
        check=$(($number - $nofsr))

        for x in $(seq 1 "$check"); do
            openstack server create --os-compute-api-version 2.52 --image "$image_name" --flavor "$flavor_name" --network vrundhavan_private${tag} --key-name $sshkey${tag} --security-group internal_security_group${tag} -f json --tag "${tag}dev" dev_"$(($nofsr + $x))"${tag} 1>/dev/null
            if [ $? -eq 0 ]; then
                echo " $(date +%T) dev_$(($nofsr + $x)) is created"
                changes_made=true
            else   
                echo " $(date +%T) Failed to create dev_$(($nofsr + $x))"
                exit 1
            fi
        done
    else
        echo " $(date +%T) Number of servers running and required servers are equal ($number)."
    fi

    # Apply changes only if servers were created or deleted
    if [ "$changes_made" = true ]; then
        # Define filenames
        # Temporary files for storing device names
        dev_file=$(mktemp)
        dev_test_file=$(mktemp)
        proxy_file=$(mktemp)
        proxy_test_file=$(mktemp)
        bastion_test_file=$(mktemp)
        bastion_file=$(mktemp)
        inventory_file=$(mktemp)
        inventory_file2=$(mktemp)

        dev_file="dev_inventory.tmp"
        dev_test_file="dev_inventory2.tmp"
        proxy_file="proxy_inventory.tmp"
        proxy_test_file="proxy_inventory2.tmp"
        bastion_file="bastion_inventory.tmp"
        bastion_test_file="bastion_inventory2.tmp"
        inventory_file="openstack_inventory"
        inventory_file2="openstack_inventory2"

# Assuming servers_json contains the JSON array of servers as you provided
sleep 60
echo " $(date +%T) sleep for 60 sec"
servers_json=$(openstack server list -f json --long)

# Clear the content of the output files before writing
> "$dev_file"
> "$dev_test_file"
> "$proxy_file"
> "$proxy_test_file"
> "$bastion_file"
> "$bastion_test_file"
> "$sshc_bastion"
> "$inventory_file"
> "$inventory_file2"

# Process each server dictionary
echo "$servers_json" | jq -c '.[]' | while IFS= read -r server; do
  # Extract values directly from the list output
  name=$(echo "$server" | jq -r '.Name')
  addresses=$(echo "$server" | jq -r '.Networks | to_entries[].value[]' | head -n 1)

if [[ -z "$addresses" ]]; then
    addresses=$(echo $server | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
    if [[ $name == *"bastion"* ]]; then
        addresses=$(echo $server | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' | sed -n '2p')
    fi
fi

  # Check if the address was successfully retrieved
  if [ -n "$addresses" ]; then
    echo -e "Host $name \n\t Hostname $addresses \n\t User ubuntu \n\t IdentityFile ~/.ssh/$sshkey" >> $sshc_bastion
    if [[ "$name" == *"dev"* && "$name" == *"$tag"* ]]; then
        echo "$name ansible_host=$addresses ansible_ssh_private_key_file=~/.ssh/${sshkey}" >> "$dev_file"
        echo "$name" >> $bastion_test_file
    elif [[ "$name" == *"proxy"* && "$name" == *"$tag"* ]]; then
        echo "$name ansible_host=$addresses ansible_ssh_private_key_file=~/.ssh/${sshkey}" >> "$proxy_file"
        echo "$name" >> $bastion_test_file
    elif [[ "$name" == *"bastion"* && "$name" == *"$tag"* ]]; then
        addresses=$(echo "$server" | jq -r '.Networks | to_entries[].value[1]' | head -n 1)
        echo "$name ansible_host=$addresses ansible_ssh_private_key_file=~/.ssh/${sshkey}" >> "$bastion_file"
        echo "$name" >> $bastion_test_file
    fi
  else 
    # Retrieve the address using openstack server show
    echo " $(date +%T) Something wrong with getting values of server ip address let's try with grep"
    echo "$server"
    val=$(openstack server show "$name")
    addresses=$(echo $val | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
    if [ -n "$addresses" ]; then
        echo -e "Host $name \n\t Hostname $addresses \n\t User ubuntu \n\t IdentityFile ~/.ssh/$sshkey" >> $sshc_bastion
        if [[ "$name" == *"dev"* && "$name" == *"$tag"* ]]; then
            echo "$name ansible_host=$addresses ansible_ssh_private_key_file=~/.ssh/${sshkey}" >> "$dev_file"
            echo "$name" >> $dev_test_file
        elif [[ "$name" == *"proxy"* && "$name" == *"$tag"* ]]; then
            echo "$name ansible_host=$addresses ansible_ssh_private_key_file=~/.ssh/${sshkey}" >> "$proxy_file"
            echo "$name" >> $proxy_test_file
        elif [[ "$name" == *"bastion"* && "$name" == *"$tag"* ]]; then
            addresses=$(echo $val | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b' | sed -n '2p')
            echo "$name ansible_host=$addresses ansible_ssh_private_key_file=~/.ssh/${sshkey}" >> "$bastion_file"
            echo "$name" >> $bastion_test_file
        fi
    else
        echo " $(date +%T) Something went wrong with retrieving the IP address for $name."
        echo $val
    fi    
  fi
done




     # Create inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_file"
      echo "[proxy]"
      cat "$proxy_file"
      echo "[bastion]"
      cat "$bastion_file" 
    } > "$inventory_file"

       # Create inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_test_file"
      echo "[proxy]"
      cat "$proxy_test_file"
      echo "[bastion]"
      cat "$bastion_test_file" 
    } > "$inventory_file2"

      # Clean up temporary files
       rm -f "$dev_file" "$proxy_file" "$bastion_file" "$dev_test_file" "$proxy_test_file" "$bastion_test_file"


        # Append groupings
        {
            echo -e "\n"
            echo "[all:children]"
            echo -e "\n"
            echo "proxy"
            echo "dev"
            echo "bastion"
        } >> "$inventory_file"

         {
            echo -e "\n"
            echo "[all:children]"
            echo -e "\n"
            echo "proxy"
            echo "dev"
            echo "bastion"
        } >> "$inventory_file2"

        echo " $(date +%T) Inventory file generated: $inventory_file"

        cp "$inventory_file" environments/prod

        rm -rf $inventory_file

        sudo chmod 600 "${sshkey}.pem" > /dev/null 2>&1

        rm -rf roles/ansible/files/*.zip > /dev/null 2>&1

        cd ..

        zip -r NSO_A2/roles/ansible/files/NSO_A2.zip NSO_A2 > /dev/null 2>&1
        
        cd NSO_A2/
        
        cp $sshc_bastion roles/ansible/files/config

cp ~/.ssh/${sshkey} roles/ansible/files/${sshkey}

chmod 0600 roles/ansible/files/config

rm -rf $sshc_bastion



sleep 5
echo " $(date +%T) wait for 5 sec before applying configurations"
ansible-playbook app.yml
        
    else
        echo " $(date +%T) No changes were made, skipping inventory update and Ansible playbook execution."
    fi

    # Restore trap for Ctrl-C during sleep
    trap 'echo " $(date +%T) Ctrl-C pressed. Exiting after sleep."; exit 0' SIGINT

    # Sleep for 30 seconds before checking again
    sleep 30
done
