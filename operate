#!/bin/bash

process_servers_json() {
    # Define temporary files
    dev_file="dev_inventory.tmp"
    dev_test_file="dev_inventory2.tmp"
    proxy_file="proxy_inventory.tmp"
    proxy_test_file="proxy_inventory2.tmp"
    bastion_file="bastion_inventory.tmp"
    bastion_test_file="bastion_inventory2.tmp"
    inventory_file="openstack_inventory"
    inventory_file2="openstack_inventory2"
    inventory_fileL="openstack_inventoryL"
    sshc_bastion="sshc_bastion.tmp"
    proxy_fileL="proxy_fileL.tmp"
    bastion_fileL="bastion_fileL.tmp"

    # Clear the content of the output files before writing
    > "$dev_file"
    > "$dev_test_file"
    > "$proxy_file"
    > "$proxy_fileL"
    > "$proxy_test_file"
    > "$bastion_file"
    > "$bastion_test_file"
    > "$sshc_bastion"
    > "$inventory_file"
    > "$inventory_file2"
    > "$inventory_fileL"
    > "$bastion_fileL"

    # Fetch the JSON output from OpenStack
    #!/bin/bash

servers_json=$(openstack server list -f json --long)

# Check if all servers are active
start_time=$(date +%s)
all_active=true

# Using a while loop with process substitution to avoid subshell
while IFS= read -r server; do
    name=$(echo "$server" | jq -r '.Name')
    power_state=$(echo "$server" | jq -r '."Power State"')

    if [[ "$power_state" != "1" ]]; then 
        all_active=false
        echo  " $(date +%T) $name is shutdown"
        break
    fi
done < <(echo "$servers_json" | jq -c '.[]')


if [ "$all_active" = false ]; then
    echo  " $(date +%T) Some servers are not in ACTIVE state. Waiting for up to 60 seconds for them to become active..."

    while : ; do
        current_time=$(date +%s)
        elapsed_time=$((current_time - start_time))

        if [ "$elapsed_time" -ge 60 ]; then
            echo  " $(date +%T) Waited 60 seconds. Some servers are still not active:"
            echo "$servers_json" | jq -c '.[]' | while IFS= read -r server; do
                name=$(echo "$server" | jq -r '.Name')
                power_state=$(echo "$server" | jq -r '."Power State"')

                if [[ "$power_state" != "1" ]]; then 
                    echo  " $(date +%T) $name is in SHUTDOWN STATE"
                fi
            done
            break
        fi

        # Re-check the status of all servers
        all_active=true
        servers_json=$(openstack server list -f json --long)
        while IFS= read -r server; do
            name=$(echo "$server" | jq -r '.Name')
            power_state=$(echo "$server" | jq -r '."Power State"')

            if [[ "$power_state" != "1" ]]; then 
                all_active=false
                break
            fi
        done < <(echo "$servers_json" | jq -c '.[]')

        if [ "$all_active" = true ]; then
            echo  " $(date +%T) All servers are now in ACTIVE state."
            break
        fi

        sleep 5  # wait before re-checking
    done
else
    echo  " $(date +%T) All servers are already in ACTIVE state. Proceeding with the script..."
fi


    # Now continue with the rest of the script (processing servers for inventory creation)
    echo "$servers_json" | jq -c '.[]' | while IFS= read -r server; do
        name=$(echo "$server" | jq -r '.Name')
        power_state=$(echo "$server" | jq -r '."Power State"')
        networks=$(echo "$server" | jq -r '.Networks | to_entries[].value[]')

        # Extract public IP
        private_IP=$(echo "$networks" | head -n 1 | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
       

        if [ -n "$private_IP" ]; then
            echo -e "Host $name \n\t Hostname $private_IP \n\t User ubuntu \n\t IdentityFile ~/.ssh/$ssh_basename" >> $sshc_bastion
            if [[ "$name" == *"dev"* && "$name" == *"$tag"* ]]; then
                echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$dev_file"
                echo "$name" >> $bastion_test_file
            elif [[ "$name" == *"proxy"* && "$name" == *"$tag"* ]]; then
                public_IP=$(echo "$server" | jq -r '.Networks | to_entries[].value[1]' | head -n 1)
                if [[ -z $public_IP ]]; then
                    echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$proxy_file"
                else
                    if [[ -n $public_IP ]]; then
                    echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=${sshkey}" >> "$proxy_fileL"
                    fi 
                    echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$proxy_file"
                fi
                
                echo "$name" >> $bastion_test_file
            elif [[ "$name" == *"bastion"* && "$name" == *"$tag"* ]]; then
                public_IP=$(echo "$server" | jq -r '.Networks | to_entries[].value[1]' | head -n 1)
                echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=${sshkey}" >> "$bastion_fileL"
                echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$bastion_file"
                echo "$name" >> $bastion_test_file
            fi
        else 
            echo " $(date +%T) Something went wrong with getting the IP address for $name."
        fi
    done

    # Create the first inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_file"
      echo "[proxy]"
      cat "$proxy_file"
      echo "[bastion]"
      cat "$bastion_file"
    } > "$inventory_file"

    # Create the second inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_test_file"
      echo "[proxy]"
      cat "$proxy_test_file"
      echo "[bastion]"
      cat "$bastion_test_file"
    } > "$inventory_file2"

    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo ""
      echo "[proxy]"
      cat "$proxy_fileL"
      echo "[bastion]"
      cat "$bastion_fileL"      

    } > "$inventory_fileL"

    # Clean up temporary files
    rm -f "$dev_file" "$proxy_file" "$proxy_fileL" "$bastion_file" "$bastion_fileL" "$dev_test_file" "$proxy_test_file" "$bastion_test_file"

    # Append groupings
    {
        echo -e "\n"
        echo "[all:children]"
        echo -e "\n"
        echo "proxy"
        echo "dev"
        echo "bastion"
    } >> "$inventory_file"

    {
        echo -e "\n"
        echo "[all:children]"
        echo -e "\n"
        echo "proxy"
        echo "dev"
        echo "bastion"
    } >> "$inventory_file2"

echo " $(date +%T) Inventory file generated: $inventory_file"

cp "$inventory_file" roles/ansible/files/prod
cp "$inventory_file2" roles/ansible/files/prod2
cp "$inventory_fileL" environments/prod
cp $sshc_bastion roles/ansible/files/config

rm -rf $inventory_file

rm -rf $inventory_file2

rm -rf $inventory_fileL

rm -rf $sshc_bastion
}
process_servers_csv() {
    # Define temporary files
    dev_file="dev_inventory.tmp"
    dev_test_file="dev_inventory2.tmp"
    proxy_file="proxy_inventory.tmp"
    proxy_test_file="proxy_inventory2.tmp"
    bastion_file="bastion_inventory.tmp"
    bastion_test_file="bastion_inventory2.tmp"
    inventory_file="openstack_inventory"
    inventory_file2="openstack_inventory2"
    inventory_fileL="openstack_inventoryL"
    sshc_bastion="sshc_bastion.tmp"
    proxy_fileL="proxy_fileL.tmp"
    bastion_fileL="bastion_fileL.tmp"

    # Clear the content of the output files before writing
    > "$dev_file"
    > "$dev_test_file"
    > "$proxy_file"
    > "$proxy_fileL"
    > "$proxy_test_file"
    > "$bastion_file"
    > "$bastion_test_file"
    > "$sshc_bastion"
    > "$inventory_file"
    > "$inventory_file2"
    > "$inventory_fileL"
    > "$bastion_fileL"

    servers_csv=$(openstack server list -f csv --long | tail -n +2)

    # Check if all servers are active
    start_time=$(date +%s)
    all_active=true

    # Process each server in a loop without creating a subshell
    while IFS=, read -r server; do
        name=$(echo $server | cut -d "," -f 2 | tr -d '"')
        power_state=$(echo $server | cut -d "," -f 5 | tr -d '"')

        if [[ "$power_state" -ne 1 ]]; then 
            all_active=false
            break
        fi
    done < <(echo "$servers_csv")

    if [ "$all_active" = false ]; then
        echo  " $(date +%T) Some servers are not in ACTIVE state. Waiting for up to 60 seconds for them to become active..."
        
        while : ; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))

            if [ "$elapsed_time" -ge 60 ]; then
                echo  " $(date +%T) Waited 60 seconds. Some servers are still not active:"
                openstack server list -f csv --long | tail -n +2 | while IFS=, read -r server; do
                    name=$(echo $server | cut -d "," -f 2 | tr -d '"')
                    power_state=$(echo $server | cut -d "," -f 5 | tr -d '"')

                    if [[ "$power_state" -ne 1 ]]; then 
                        echo  " $(date +%T) $name is in SHUTDOWN STATE"
                    fi
                done
                break
            fi

            # Re-check the status of all servers
            all_active=true
            while IFS=, read -r server; do
                name=$(echo $server | cut -d "," -f 2 | tr -d '"')
                power_state=$(echo $server | cut -d "," -f 5 | tr -d '"')

                if [[ "$power_state" -ne 1 ]]; then 
                    all_active=false
                    break
                fi
            done < <(openstack server list -f csv --long | tail -n +2)

            if [ "$all_active" = true ]; then
                echo  " $(date +%T) All servers are now in ACTIVE state."
                break
            fi

            sleep 5  # wait before re-checking
        done
    else
        echo  " $(date +%T) All servers are already in ACTIVE state. Proceeding with the script..."
    fi

    # Now continue with the rest of the script (processing servers for inventory creation)
    echo "$servers_csv" | while IFS=, read -r server; do
        name=$(echo $server | cut -d "," -f 2 | tr -d '"')
        power_state=$(echo $server | cut -d "," -f 5 | tr -d '"')
        networks=$(echo $server | cut -d "," -f 6)

        # Extract public IP
        public_IP=$(echo $server | cut -d "," -f 7 | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
        private_IP=$(echo $server | cut -d "," -f 6 | grep -oP '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')

        if [ -n "$private_IP" ]; then
            echo -e "Host $name \n\t Hostname $private_IP \n\t User ubuntu \n\t IdentityFile ~/.ssh/$ssh_basename" >> $sshc_bastion
            if [[ "$name" == *"dev"* && "$name" == *"$tag"* ]]; then
                echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${sshkey_basename}" >> "$dev_file"
                echo "$name" >> $bastion_test_file
            elif [[ "$name" == *"proxy"* && "$name" == *"$tag"* ]]; then
                if [[ -z $public_IP ]]; then
                    echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${sshkey_basename}" >> "$proxy_file"
                else
                    if [[ -n $public_IP ]]; then
                    echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=${sshkey}" >> "$proxy_fileL"
                    fi 
                    echo "$name ansible_host=$private_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$proxy_file"
                fi
                echo "$name" >> $bastion_test_file
            elif [[ "$name" == *"bastion"* && "$name" == *"$tag"* ]]; then
                echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=${sshkey}" >> "$bastion_fileL"
                echo "$name ansible_host=$public_IP ansible_ssh_private_key_file=~/.ssh/${ssh_basename}" >> "$bastion_file"
                echo "$name" >> $bastion_test_file
            fi
        else 
            echo "$(date +%T) Something went wrong with getting the IP address for $name."
        fi
    done

    # Create the first inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_file"
      echo "[proxy]"
      cat "$proxy_file"
      echo "[bastion]"
      cat "$bastion_file"
    } > "$inventory_file"

    # Create the second inventory file
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo "[dev]"
      cat "$dev_test_file"
      echo "[proxy]"
      cat "$proxy_test_file"
      echo "[bastion]"
      cat "$bastion_test_file"
    } > "$inventory_file2"

    # Create the third inventory file (inventory_fileL)
    {
      echo "[local]"
      echo "localhost ansible_connection=local"
      echo ""
      echo "[proxy]"
      cat "$proxy_fileL"
      echo "[bastion]"
      cat "$bastion_fileL"
    } > "$inventory_fileL"

    # Clean up temporary files
    rm -f "$dev_file" "$proxy_file" "$proxy_fileL" "$bastion_file" "$bastion_fileL" "$dev_test_file" "$proxy_test_file" "$bastion_test_file"

    # Append groupings
    {
        echo -e "\n"
        echo "[all:children]"
        echo -e "\n"
        echo "proxy"
        echo "dev"
        echo "bastion"
    } >> "$inventory_file"

    {
        echo -e "\n"
        echo "[all:children]"
        echo -e "\n"
        echo "proxy"
        echo "dev"
        echo "bastion"
    } >> "$inventory_file2"

    echo " $(date +%T) Inventory file generated: $inventory_file"

    cp "$inventory_file" roles/ansible/files/prod
    cp "$inventory_file2" roles/ansible/files/prod2
    cp "$inventory_fileL" environments/prod

    cp $sshc_bastion roles/ansible/files/config

    sudo chmod 0600 roles/ansible/files/config

    rm -rf $inventory_file
    rm -rf $inventory_file2
    rm -rf $inventory_fileL
    rm -rf $sshc_bastion
}
# Ensure the script receives exactly three arguments
if [ "$#" -ne 3 ]; then
    echo "Usage: $0 <openrc_file> <tag> <sshkey>"
    exit 1
fi

# Assign arguments to variables
openrc_file=$1
tag=$2
sshkey=$3

# Source the OpenRC file to set environment variables
source "$openrc_file"

ssh_basename=$(basename $sshkey)

# Path to the configuration file
config_file="server.conf"

sshc_my="~/.ssh/config/"

sshc_bastion="./ssh/config"

# Ensure the configuration file exists
if [ ! -f "$config_file" ]; then
    echo " $(date +%T) Configuration file not found!"
    exit 1
fi

# Signal handlers
trap 'echo " $(date +%T) Ctrl-C pressed. Exiting after sleep."; exit 0' SIGINT
trap 'echo " $(date +%T) Ctrl-X pressed. Exiting immediately."; exit 0' SIGTSTP

while true; do
    # Read the number from the configuration file
    number=$(cat "$config_file")

    # Check if the variable is empty
    if [ -z "$number" ]; then
        echo " $(date +%T) No number found in configuration file!"
        exit 1
    fi

    export image_name='Ubuntu 22.04 Jammy Jellyfish x86_64'
    export flavor_name='m1.small'

    # Print the value to verify
    echo " $(date +%T) Desired number of servers: $number"

    # Get the current number of servers with "dev" in their name
    nofsr=$(openstack server list -f csv | grep $tag | grep "dev" | wc -l)
    echo " $(date +%T) Number of servers running is $nofsr"

    # Reset the trap for Ctrl-C to ensure proper behavior during critical operations
    trap 'echo " $(date +%T) Ctrl-C pressed. Waiting for settings to be applied before exiting."' SIGINT

    # Flag to check if any changes were made
    changes_made=false



    if [ "$number" -lt "$nofsr" ]; then
        # Calculate how many servers need to be deleted
        check=$(($nofsr - $number))

        # List servers with the specific tag
        servers_with_tag=$(openstack server list -f csv |grep "$tag" | grep "dev" | cut -d "," -f1 | tr -d '"' | head -n "$check")

        for server_id in $servers_with_tag; do
            openstack server delete "$server_id"
            if [ $? -eq 0 ]; then
                echo " $(date +%T) Server $server_id ($(openstack server show $server_id -f json | jq -r '.name')) deleted"
                changes_made=true
            else   
                echo " $(date +%T) Failed to delete server $server_id ($(openstack server show $server_id -f json | jq -r '.name')) "
                openstack server show "$server_id"
                openstack server list -f csv | grep $tag | grep dev
                exit 1
            fi
        done

    elif [ "$number" -gt "$nofsr" ]; then
        # Calculate how many more servers need to be created
        check=$(($number - $nofsr))

        for x in $(seq 1 "$check"); do
            openstack server create  --image "$image_name" --flavor "$flavor_name" --network vrundhavan_private${tag} --key-name $ssh_basename --security-group internal_security_group${tag}  dev_"$(($nofsr + $x))"${tag} 1>/dev/null
            if [ $? -eq 0 ]; then
                echo " $(date +%T) dev_$(($nofsr + $x)) is created"
                changes_made=true
            else   
                echo " $(date +%T) Failed to create dev_$(($nofsr + $x))"
                exit 1
            fi
        done
    else
        echo " $(date +%T) Number of servers running and required servers are equal ($number)."
    fi

    # Apply changes only if servers were created or deleted
    if [ "$changes_made" = true ]; then
        # Define filenames
        # Temporary files for storing device names
 process_servers_json 2>error.log

if grep -q "jq" error.log; then
    echo " $(date +%T) Something wrong with JSON format. Let's solve this by CSV."
    process_servers_csv
fi
rm -rf error.log

        
file_permissions=$(stat -c "%a" ${sshkey})

# Check if the permissions are equal to 0600
if [ "$file_permissions" -eq 600 ]; then
    echo " $(date +%T) The file has the correct permissions: 0600"
else
    echo " $(date +%T) The file ${sshkey} does not have the correct permissions. Current permissions: $file_permissions"
    sudo chmod 0600 ${sshkey} > /dev/null 2>&1
fi

        rm -rf roles/ansible/files/*.zip > /dev/null 2>&1

        cd ..

        zip -r NSO_A2/roles/ansible/files/NSO_A2.zip NSO_A2 > /dev/null 2>&1
        
        cd NSO_A2/
        


sleep 5
echo " $(date +%T) wait for 5 sec before applying configurations"
ansible-playbook app.yml
        
    else
        echo " $(date +%T) No changes were made, skipping inventory update and Ansible playbook execution."
    fi

    # Restore trap for Ctrl-C during sleep
    trap 'echo " $(date +%T) Ctrl-C pressed. Exiting after sleep."; exit 0' SIGINT

    # Sleep for 30 seconds before checking again
    sleep 30
done
