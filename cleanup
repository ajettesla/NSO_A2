#!/bin/bash

openrc_file=$1
tag=$2
sshkey=$3

source $openrc_file

ssh_basename=$(basename $sshkey)

# Check if the keypair exists and prompt for deletion
openstack keypair list | grep ${ssh_basename} > /dev/null
if [[ $? -eq 0 ]]; then
    echo -n " $(date +%T) Specify if you want to delete key pair from the cloud (y/n): "
    read -r -t 2 response
    if [[ "$response" == "y" || "$response" == "Y" ]]; then
        openstack keypair delete "${ssh_basename}" 2>&1 > /dev/null
        if [ $? = 0 ]; then
            echo " $(date +%T) Key pair ${ssh_basename} deleted successfully."
        else
            if openstack keypair list | grep -q ${ssh_basename}; then
                echo "$(date +%T) Failed to delete key pair ${ssh_basename}."
            else
                echo "$(date +%T) Key pair ${ssh_basename} did not exist."
            fi
        fi
    else
        echo " $(date +%T) Key pair deletion aborted."
    fi
else 
    echo " $(date +%T) Key ${ssh_basename} is not present in the cloud."
fi

# Delete all matching floating IPs by their Floating IP Address
for x in $(openstack floating ip list -f json | jq -r '.[]."Floating IP Address"'); do  
    # Get the ID and Name of the floating IP
    floating_ip_id=$(openstack floating ip show $x -f json | jq -r '.id')
    floating_ip_name=$(openstack floating ip show $x -f json | jq -r '.floating_ip_address')
    
    # Check if the floating IP has the specified tag
    if [[ "$(openstack floating ip show $x -f json | jq -r '.tags')" == *"${tag}"* ]]; then   
        # Attempt to delete the floating IP
        openstack floating ip delete $floating_ip_id > /dev/null 2>&1
        if [ $? = 0 ]; then
            echo " $(date +%T) Floating IP $floating_ip_id ($floating_ip_name) deleted"; 
        else
            echo " $(date +%T) Failed to delete Floating IP $floating_ip_id ($floating_ip_name)"; 
        fi
    else     
        echo " $(date +%T) Floating IP $floating_ip_id ($floating_ip_name) did not have the specified tag, skipping deletion"; 
    fi
done

# Delete all matching servers by their IDs
for server_id in $(openstack server list -f json | jq -r '.[] | select(.Name | contains("'"$tag"'")).ID'); do
    server_name=$(openstack server show $server_id -f json | jq -r '.name')
    openstack server delete $server_id > /dev/null 2>&1
    if [ $? = 0 ]; then
        echo " $(date +%T) Server $server_id ($server_name) deleted."
    else
        if openstack server show $server_id > /dev/null 2>&1; then
            echo "$(date +%T) Failed to delete server $server_id ($server_name)."
        else
            echo "$(date +%T) Server $server_id ($server_name) did not exist."
        fi
    fi
done

# Remove all matching subnets from the router by their IDs
for subnet_id in $(openstack subnet list -f json | jq -r '.[] | select(.Name | contains("'"$tag"'")).ID'); do
    subnet_name=$(openstack subnet show $subnet_id -f json | jq -r '.name')
    openstack router remove subnet router_1${tag} $subnet_id > /dev/null 2>&1
    if [ $? = 0 ]; then
        echo " $(date +%T) Subnet $subnet_id ($subnet_name) removed from router_1${tag}."
    else 
        if openstack subnet show $subnet_id > /dev/null 2>&1; then
            echo "$(date +%T) Failed to remove subnet $subnet_id ($subnet_name) from router_1${tag}."
        else
            echo "$(date +%T) Subnet $subnet_id ($subnet_name) did not exist."
        fi
    fi
done

# Unset router external gateway
openstack router unset --external-gateway router_1${tag} > /dev/null 2>&1
if [ $? = 0 ]; then
    echo " $(date +%T) Router external gateway unset."
else 
    if openstack router show router_1${tag} > /dev/null 2>&1; then
        echo " $(date +%T) Failed to unset router external gateway."
    else
        echo " $(date +%T) Router router_1${tag} did not exist."
    fi
fi

# Delete all matching subnets by their IDs
for subnet_id in $(openstack subnet list -f json | jq -r '.[] | select(.Name | contains("'"$tag"'")).ID'); do
    subnet_name=$(openstack subnet show $subnet_id -f json | jq -r '.name')
    openstack subnet delete $subnet_id > /dev/null 2>&1
    if [ $? = 0 ]; then
        echo " $(date +%T) Subnet $subnet_id ($subnet_name) deleted."
    else 
        if openstack subnet show $subnet_id > /dev/null 2>&1; then
            echo "$(date +%T) Failed to delete subnet $subnet_id ($subnet_name)."
        else
            echo "$(date +%T) Subnet $subnet_id ($subnet_name) did not exist."
        fi
    fi
done

# Delete the router by its ID
router_id=$(openstack router list -f json | jq -r '.[] | select(.Name == "router_1'${tag}'").ID')
router_name=$(openstack router show $router_id -f json | jq -r '.name')
openstack router delete $router_id > /dev/null 2>&1
if [ $? = 0 ]; then
    echo " $(date +%T) Router $router_id ($router_name) deleted."
else 
    if openstack router show $router_id > /dev/null 2>&1; then
        echo " $(date +%T) Failed to delete router $router_id ($router_name)."
    else
        echo " $(date +%T) Router $router_id ($router_name) did not exist."
    fi
fi

# Delete all matching networks by their IDs
for network_id in $(openstack network list -f json | jq -r '.[] | select(.Name | contains("'"$tag"'")).ID'); do
    network_name=$(openstack network show $network_id -f json | jq -r '.name')
    openstack network delete $network_id > /dev/null 2>&1
    if [ $? = 0 ]; then
        echo " $(date +%T) Network $network_id ($network_name) deleted."
    else 
        if openstack network show $network_id > /dev/null 2>&1; then
            echo "$(date +%T) Failed to delete network $network_id ($network_name)."
        else
            echo "$(date +%T) Network $network_id ($network_name) did not exist."
        fi
    fi
done

# Delete all matching security groups by their IDs
for sg_id in $(openstack security group list -f json | jq -r '.[] | select(.Name | contains("'"$tag"'")).ID'); do
    sg_name=$(openstack security group show $sg_id -f json | jq -r '.name')
    openstack security group delete $sg_id > /dev/null 2>&1
    if [ $? = 0 ]; then
        echo " $(date +%T) Security group $sg_id ($sg_name) deleted."
    else 
        if openstack security group show $sg_id > /dev/null 2>&1; then
            echo "$(date +%T) Failed to delete security group $sg_id ($sg_name)."
        else
            echo "$(date +%T) Security group $sg_id ($sg_name) did not exist."
        fi
    fi
done
